name: "Pipeline"

on:
  pull_request:
    branches:
      - main
      - deploy/prod/swarm
    paths:
      - .docker/*
      - .github/workflows/*.yml
      - config/*
      - requirements/*.txt
      - src/**/*.py
      - tests/**/*.py
  push:
    branches:
      - main
      - release
    paths:
      - .docker/*
      - .github/workflows/*.yml
      - config/*.py
      - requirements/*.txt
      - src/**/*.py
      - tests/**/*.py

jobs:
  # lint:
  #   if: ${{ github.event_name == 'pull_request' }}
  #   runs-on: "ubuntu-20.04"
  #   steps:
  #     - uses: actions/checkout@v2

  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.9.6"

  #     - uses: actions/cache@v2
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-
  #           ${{ runner.os }}-

  #     - name: "Install test dependencies"
  #       run: |
  #         pip install --upgrade pip setuptools wheel
  #         pip install --requirement requirements/test.txt
  #         pip install --requirement requirements/prod.txt

  #     - name: "Run black for formatting"
  #       run: black --config config/pyproject.toml .

  #     - name: "Run flake8 for linting"
  #       run: flake8 --config config/setup.cfg .

  #     - name: "Run isort for imports formatting"
  #       run: isort --check --settings-file config/pyproject.toml .

  # security:
  #   if: ${{ github.event_name == 'pull_request' }}
  #   runs-on: "ubuntu-20.04"
  #   needs:
  #     - lint
  #   steps:
  #     - uses: actions/checkout@v2

  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "14.16.1"

  #     - name: "Install snyk"
  #       run: npm install -g snyk

  #     - name: "Authenticate snyk"
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_SECRET_KEY }}
  #       run: snyk auth $SNYK_TOKEN

  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.9.6"

  #     - uses: actions/cache@v2
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-
  #           ${{ runner.os }}-

  #     - name: "Install test dependencies"
  #       run: |
  #         pip install --upgrade pip setuptools wheel
  #         pip install --requirement requirements/prod.txt
  #         pip install --requirement requirements/test.txt

  #     - name: "Enable snyk test"
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_SECRET_KEY }}
  #       run: snyk test --command=python3 --file=requirements/prod.txt --package-manager=pip

  #     - name: "Enable snyk monitoring"
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_SECRET_KEY }}
  #       run: snyk monitor --command=python3 --file=requirements/prod.txt --package-manager=pip

  # build:
  #   if: ${{ github.event_name == 'pull_request' }}
  #   runs-on: "ubuntu-20.04"
  #   needs:
  #     - security
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: "Build docker image"
  #       run: docker image build --file .docker/Dockerfile --tag gambley_backend:${{ github.sha }} .

  # unit-test:
  #   if: ${{ github.event_name == 'pull_request' }}
  #   runs-on: "ubuntu-18.04"
  #   needs:
  #     - build
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: "Prepare test data directory"
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.GAMBLEY_CD_USER_AWS_ACCESS_KEY }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.GAMBLEY_CD_USER_AWS_SECRET_KEY }}
  #       run: scripts/setup_test_data.sh

  #     - name: "Runs unit test"
  #       env:
  #         DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
  #       run: |
  #         docker image build \
  #           --file .docker/Dockerfile \
  #           --tag gambley_backend:${{ github.sha }} \
  #           .
  #         touch $(pwd)/coverage.xml
  #         docker container run \
  #           --rm \
  #           --env DEEPSOURCE_DSN=$DEEPSOURCE_DSN \
  #           --user root \
  #           --volume $(pwd)/coverage.xml:/app/coverage.xml \
  #           --volume $(pwd)/test/data:/app/test/data \
  #           gambley_backend:${{ github.sha }} \
  #           pytest -c config/pyproject.toml
  #         scripts/upload_coverage.sh

  # integration-test:
  #   if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
  #   runs-on: "ubuntu-20.04"
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: "Runs Integration test"
  #       run: |
  #         docker image build \
  #           --file .docker/Dockerfile \
  #           --tag gambley_backend:${{ github.sha }} \
  #           .
  #         docker container run \
  #           --rm \
  #           --user root \
  #           gambley_backend:${{ github.sha }} \
  #           pytest --help

  # deploy-staging:
  #   if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
  #   runs-on: "ubuntu-20.04"
  #   needs:
  #     - integration-test
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: "Logs in Heroku Container Registry"
  #       env:
  #         HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  #       run: heroku container:login

  #     - name: "Build & Push the image"
  #       env:
  #         HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  #       run: |
  #         cp .docker/Dockerfile .
  #         heroku container:push --app gambley-backend-web web

  #     - name: "Release the image"
  #       env:
  #         HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  #       run: heroku container:release --app gambley-backend-web web

  deploy-production:
    if: ${{ github.event_name == 'pull_request' }}
    # if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/release' }}
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v2

      - name: "Login to ECR"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.GAMBLEY_CD_USER_AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.GAMBLEY_CD_USER_AWS_SECRET_KEY }}
        run: aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 783729352349.dkr.ecr.ap-south-1.amazonaws.com

      - name: "Build docker image"
        run: docker build --file .docker/Dockerfile --tag gambley_backend:${{ github.sha }} .

      - name: "Tag docker image"
        run: docker tag gambley_backend:${{ github.sha }} 783729352349.dkr.ecr.ap-south-1.amazonaws.com/gambley_backend:${{ github.sha }}

      - name: "Push docker image"
        run: docker push 783729352349.dkr.ecr.ap-south-1.amazonaws.com/gambley_backend:${{ github.sha }}

      - name: "Run deployment script"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.GAMBLEY_CD_USER_AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.GAMBLEY_CD_USER_AWS_SECRET_KEY }}
          IMAGE_TAG: ${{ github.sha }}
          GAMBLEY_MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          GAMBLEY_MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        run: |
          scripts/pre_deploy.sh
          ssh -i id_gambley -o StrictHostKeyChecking=no ubuntu@3.109.12.202 < scripts/deploy_prod.sh
          rm id_gambley
